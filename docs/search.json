[{"path":"https://Ziwei-ChenChen.github.io/savvySh/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"https://Ziwei-ChenChen.github.io/savvySh/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"https://Ziwei-ChenChen.github.io/savvySh/LICENSE.html","id":"id_0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"https://Ziwei-ChenChen.github.io/savvySh/LICENSE.html","id":"id_1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"https://Ziwei-ChenChen.github.io/savvySh/LICENSE.html","id":"id_2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"https://Ziwei-ChenChen.github.io/savvySh/LICENSE.html","id":"id_3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"https://Ziwei-ChenChen.github.io/savvySh/LICENSE.html","id":"id_4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"https://Ziwei-ChenChen.github.io/savvySh/LICENSE.html","id":"id_5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"https://Ziwei-ChenChen.github.io/savvySh/LICENSE.html","id":"id_6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"https://Ziwei-ChenChen.github.io/savvySh/LICENSE.html","id":"id_7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"https://Ziwei-ChenChen.github.io/savvySh/LICENSE.html","id":"id_8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"https://Ziwei-ChenChen.github.io/savvySh/LICENSE.html","id":"id_9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"https://Ziwei-ChenChen.github.io/savvySh/LICENSE.html","id":"id_10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"https://Ziwei-ChenChen.github.io/savvySh/LICENSE.html","id":"id_11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"https://Ziwei-ChenChen.github.io/savvySh/LICENSE.html","id":"id_12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"https://Ziwei-ChenChen.github.io/savvySh/LICENSE.html","id":"id_13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"https://Ziwei-ChenChen.github.io/savvySh/LICENSE.html","id":"id_14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"https://Ziwei-ChenChen.github.io/savvySh/LICENSE.html","id":"id_15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"https://Ziwei-ChenChen.github.io/savvySh/LICENSE.html","id":"id_16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"https://Ziwei-ChenChen.github.io/savvySh/LICENSE.html","id":"id_17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"https://Ziwei-ChenChen.github.io/savvySh/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) <year>  <name of author>  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. <program>  Copyright (C) <year>  <name of author> This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":"https://Ziwei-ChenChen.github.io/savvySh/articles/savvySh.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"savvySh: Shrinkage Methods for Linear Regression Estimation","text":"savvySh R package implements suite shrinkage estimators multivariate linear regression. motivation shrinkage estimation originates Stein’s paradox, shows possible improve classical Ordinary Least Squares (OLS) estimator estimating multiple parameters simultaneously. improvement achieved introducing structured bias reduces variance, yielding estimators smaller overall Mean Squared Error (MSE). savvySh package provides unified interface four shrinkage strategies, designed improve prediction accuracy estimation stability finite samples. methods require cross-validation tuning parameter selection, exception Shrinkage Ridge Regression (SRR), shrinkage intensity chosen minimizing explicit MSE criterion. package particularly suited high-dimensional settings cases design matrix exhibits near multicollinearity. Empirical results simulation real data settings show least one shrinkage estimators consistently performs well better OLS, many cases leads substantial improvements, especially applied generalized linear models. details, please see: Asimit, V., Cidota, M. ., Chen, Z., & Asimit, J. (2025). Slab Shrinkage Linear Regression Estimation Main features: savvySh provides four classes shrinkage estimators linear regression: Multiplicative Shrinkage: Modifies OLS estimates applying data-driven multiplicative factors. includes Stein estimator (St), Diagonal Shrinkage (DSh), general Shrinkage estimator (Sh) solves Sylvester equation. Slab Regression: Adds quadratic penalty shrink coefficients specific directions. Simple Slab Regression (SR) penalizes along fixed direction, Generalized Slab Regression (GSR) allows penalties along multiple directions, typically aligned data structure. Linear Shrinkage: Combines OLS estimator (origin) target assumes uncorrelated covariates. method designed standardized data avoids estimating intercept. Shrinkage Ridge Regression: Improves Ridge Regression (RR) shrinking toward diagonal matrix equal entries, balancing sample structure stable target. Inputs: primary inputs savvySh similar regression function: x: design matrix (predictor matrix) dimension n×pn\\times p. y: response vector length nn. model_class: shrinkage method use (one \"Multiplicative\", \"Slab\", \"Linear\", \"ShrinkageRR\"). Additional method-specific parameters (e.g., include Shor ), sensible defaults automatic selection provided. Output: output savvySh list containing several elements: call: original function call. model: data frame y x used analysis. optimal_lambda: penalty parameter used (applicable). model_class: shrinkage method used (e.g.,\"Multiplicative\", \"Slab\", \"Linear\", \"ShrinkageRR\"). coefficients: list estimated coefficients applicable estimator chosen model_class. Additional method-specific diagnostics (e.g., fitted values predicted MSE). vignette provides overview methods implemented savvySh demonstrates use simulated data real data. begin theoretical overview shrinkage class, walk simulation examples illustrate apply savvySh method.","code":""},{"path":"https://Ziwei-ChenChen.github.io/savvySh/articles/savvySh.html","id":"theoretical-overview","dir":"Articles","previous_headings":"","what":"Theoretical Overview","title":"savvySh: Shrinkage Methods for Linear Regression Estimation","text":"savvySh function encompasses four shrinkage strategies linear regression. methods aim improve predictive accuracy interpretability trading small amount bias larger reduction variance. briefly summarize theoretical background method. Consider response vector 𝐲∈ℜn\\mathbf{y} \\\\Re^n predictor matrix 𝐗∈ℜn×(p+1)\\mathbf{X} \\\\Re^{n \\times (p+1)}. Let 𝛃̂OLS\\widehat{\\boldsymbol{\\beta}}^{\\text{OLS}} OLS estimator coefficient vector, Σ=𝐗⊤𝐗\\Sigma = \\mathbf{X}^\\top \\mathbf{X} Gram matrix design.","code":""},{"path":"https://Ziwei-ChenChen.github.io/savvySh/articles/savvySh.html","id":"multiplicative-shrinkage","dir":"Articles","previous_headings":"Theoretical Overview","what":"Multiplicative Shrinkage","title":"savvySh: Shrinkage Methods for Linear Regression Estimation","text":"class estimators modifies OLS solution multiplying matrix 𝐃\\mathbf{D}, yielding form 𝛃̂=𝐃𝛃̂OLS\\widehat{\\boldsymbol{\\beta}} = \\mathbf{D} \\widehat{\\boldsymbol{\\beta}}^{OLS}. goal choose 𝐃\\mathbf{D} minimize MSE resulting estimator. earlier work Hocking et al. (1976) focused case design matrix canonical form (orthonormal), framework generalizes results arbitrary design matrices without requiring assumption. Common choices 𝐃\\mathbf{D} include: Stein Estimator (St): St estimator shrinks coefficients uniformly single factor *̂\\widehat{^*}: 𝛃̂St=*̂𝛃̂OLS,wherea*̂=(𝛃̂OLS)T𝛃̂OLS(𝛃̂OLS)T𝛃̂OLS+MSE(𝛃̂OLS)̂. \\widehat{\\boldsymbol{\\beta}}^{\\text{St}} = \\widehat{^*} \\widehat{\\boldsymbol{\\beta}}^{\\text{OLS}}, \\quad \\text{} \\quad \\widehat{^*} = \\frac{\\left(\\widehat{\\boldsymbol\\beta}^{OLS}\\right)^T\\widehat{\\boldsymbol\\beta}^{OLS}}{\\left(\\widehat{\\boldsymbol\\beta}^{OLS}\\right)^T\\widehat{\\boldsymbol\\beta}^{OLS} + \\widehat{\\text{MSE}\\left(\\widehat{\\boldsymbol{\\beta}}^{\\text{OLS}}\\right)}}. corresponds 𝐃=a𝐈p+1\\mathbf{D} = \\mathbf{}_{p+1}. reduces variance scaling coefficients equally. Diagonal Shrinkage Estimator (DSh): Extending St estimator, DSh applies separate shrinkage factor bk*̂\\widehat{b_k^*} coefficient: 𝛃̂DSh=diag(𝐛*̂),wherebk*̂=(β̂kOLS)2(β̂kOLS)2+σ2̂σk. \\widehat{\\boldsymbol{\\beta}}^{\\text{DSh}} = \\text{diag}\\left(\\widehat{\\mathbf{b^*}}\\right), \\quad  \\text{} \\quad \\widehat{b_k^*} = \\frac{\\left(\\widehat{\\beta}_k^{\\text{OLS}}\\right)^2}{\\left(\\widehat{\\beta}_k^{\\text{OLS}}\\right)^2 + \\widehat{\\sigma^2} \\sigma_k}. corresponds 𝐃=diag(𝐛)\\mathbf{D} = \\text{diag}\\left(\\mathbf{b}\\right) σk\\sigma_k kthk^{\\text{th}} diagonal entry Σ−1\\Sigma^{-1} σ2̂\\widehat{\\sigma^2} estimated residual variance. Shrinkage Estimator (Sh): Sh estimator general form multiplicative shrinkage family. applies full (non-diagonal) matrix 𝐂*̂\\widehat{\\mathbf{C}^*} OLS estimate requires solving Sylvester equation: 𝛃̂Sh=𝐂*̂𝛃̂OLS,𝐂*̂ solves Sylvester equation:Σ−1𝐂+𝐂𝛃̂OLS(𝛃̂OLS)T=𝛃̂OLS(𝛃̂OLS)T. \\widehat{\\boldsymbol{\\beta}}^{\\text{Sh}} = \\widehat{\\mathbf{C}^*} \\widehat{\\boldsymbol{\\beta}}^{\\text{OLS}}, \\quad \\text{} \\widehat{\\mathbf{C}^*} \\text{ solves Sylvester equation:} \\ \\Sigma^{-1} \\mathbf{C} + \\mathbf{C} \\widehat{\\boldsymbol{\\beta}}^{\\text{OLS}} \\left(\\widehat{\\boldsymbol{\\beta}}^{\\text{OLS}}\\right)^T = \\widehat{\\boldsymbol{\\beta}}^{\\text{OLS}} \\left(\\widehat{\\boldsymbol{\\beta}}^{\\text{OLS}}\\right)^T. corresponds 𝐃=diag(𝐂)\\mathbf{D} = \\text{diag}\\left(\\mathbf{C}\\right). Unlike St DSh, Sh estimator allows interactions across coefficients -diagonal entries 𝐂*̂\\widehat{\\mathbf{C}^*}, capturing richer shrinkage structures.","code":""},{"path":"https://Ziwei-ChenChen.github.io/savvySh/articles/savvySh.html","id":"slab-regression","dir":"Articles","previous_headings":"Theoretical Overview","what":"Slab Regression","title":"savvySh: Shrinkage Methods for Linear Regression Estimation","text":"Slab regression introduces structured quadratic penalty shrinks regression coefficients specified directions. closely related Generalized LASSO estimator introduced Tibshirani Taylor (2011), key differences. Unlike Generalized LASSO, slab regression aim variable selection sparsity, avoids cross-validation selecting shrinkage levels theoretical MSE criteria. penalties based projection constraints can fixed (e.g., constant direction 𝐮=𝟏\\mathbf{u} = \\mathbf{1}) structured (e.g., eigenvectors Σ\\Sigma). leads two main estimators. (Simple) Slab Regression (SR): SR estimator applies single penalty along fixed direction vector 𝐮∈ℜp+1\\mathbf{u} \\\\Re^{p+1}. common choice 𝐮=𝟏\\mathbf{u} = \\mathbf{1}. estimator given : 𝛃̂SR(μ;𝐮):=argmin𝛃∈ℜp+1(∑=1n(yi−𝐱i⊤𝛃)2+μ(𝐮⊤𝛃)2), \\widehat{\\boldsymbol{\\beta}}^{SR}\\left(\\mu;\\textbf{u}\\right) := \\arg\\min_{\\boldsymbol{\\beta}\\\\Re^{p+1}} \\left( \\sum_{=1}^n \\big(y_i - \\mathbf{x}_i^\\top \\boldsymbol{\\beta}\\big)^2 + \\mu \\big(\\mathbf{u}^\\top \\boldsymbol{\\beta}\\big)^2 \\right), μ≥0\\mu \\geq 0 penalty parameter controls amount shrinkage along 𝐮\\mathbf{u} closed-form, chosen analytically minimize MSE slab constraint (𝛃⊤𝐮)2(\\boldsymbol{\\beta}^\\top \\mathbf{u})^2. Generalized Slab Regression (GSR): GSR estimator extends SR allowing shrinkage multiple directions. directions typically chosen eigenvectors Σ\\Sigma. estimator : 𝛃̂GSR(𝛍):=argmin𝛃∈ℜp+1(∑=1n(yi−𝐱i⊤𝛃)2+∑l∈ℒμl(𝐮l⊤𝛃)2), \\widehat{\\boldsymbol{\\beta}}^{GSR}(\\boldsymbol{\\mu}) := \\arg\\min_{\\boldsymbol{\\beta} \\\\Re^{p+1}}  \\left(\\sum_{=1}^n \\big(y_i - \\mathbf{x}_i^\\top \\boldsymbol{\\beta}\\big)^2 + \\sum_{l \\\\mathcal{L}} \\mu_l \\big(\\mathbf{u}_l^\\top \\boldsymbol{\\beta}\\big)^2 \\right), μl≥0\\mu_l \\geq 0 controls strength shrinkage along 𝐮l\\mathbf{u}_l, set ℒ\\mathcal{L} indexes selected directions. special case arises 𝐮l\\mathbf{u}_l form standard basis vectors, recovering classical Generalized RR Hoerl Kennard (1970).","code":""},{"path":"https://Ziwei-ChenChen.github.io/savvySh/articles/savvySh.html","id":"linear-shrinkage","dir":"Articles","previous_headings":"Theoretical Overview","what":"Linear Shrinkage","title":"savvySh: Shrinkage Methods for Linear Regression Estimation","text":"LSh estimator combines OLS estimator (computed origin) target estimator assumes uncorrelated covariates (Σ̃=diag(Σ)\\widetilde{\\Sigma} = \\mathrm{diag}(\\Sigma)). target estimator given 𝛃̂ind=Σ̃−1𝐗T𝐲\\widehat{\\boldsymbol{\\beta}}^{ind} = \\widetilde{\\Sigma}^{-1}\\mathbf{X}^T\\mathbf{y}. method assumes data standardized (zero mean unit variance) intercept needed. LSh estimator defined : 𝛃̂ind(ρ):=(1−ρ)𝛃̂̂OLS+ρ𝛃̂ind=(ρΣ̃−1Σ+(1−ρ)𝐈p)𝛃̂̂OLS:=Σ(ρ)𝛃̂̂OLS, \\widehat{\\boldsymbol{\\beta}}^{ind}(\\rho):=(1-\\rho)\\widehat{\\widehat{\\boldsymbol{\\beta}\\,}}^{OLS}+\\rho \\widehat{\\boldsymbol{\\beta}}^{ind}=\\left(\\rho\\widetilde{\\Sigma}^{-1}\\Sigma + (1-\\rho)\\textbf{}_p\\right)\\widehat{\\widehat{\\boldsymbol{\\beta}\\,}}^{OLS}:=\\Sigma(\\rho)\\widehat{\\widehat{\\boldsymbol{\\beta}\\,}}^{OLS}, 𝛃̂̂OLS\\widehat{\\widehat{\\boldsymbol{\\beta}}}^{OLS} OLS estimator without intercept, ρ\\rho shrinkage intensity chosen improve stability reduce MSE.","code":""},{"path":"https://Ziwei-ChenChen.github.io/savvySh/articles/savvySh.html","id":"shrinkage-ridge-regression","dir":"Articles","previous_headings":"Theoretical Overview","what":"Shrinkage Ridge Regression","title":"savvySh: Shrinkage Methods for Linear Regression Estimation","text":"SRR estimator improves upon standard RR shrinking Σ\\Sigma toward diagonal matrix equal entries. Specifically, shrinks toward v𝐈p+1v \\mathbf{}_{p+1}, v=1p+1Tr(Σ)v = \\frac{1}{p+1} \\mathrm{Tr}(\\Sigma) average variance across covariates intercept. SRR estimator given : 𝛃̂SRR(ρ)=(Σ*(ρ))−1𝐗T𝐲withΣ*(ρ)=(1−ρ)Σ+ρv𝐈p+1. \\widehat{\\boldsymbol{\\beta}}^{SRR}(\\rho)=\\big(\\Sigma^*(\\rho)\\big)^{-1}\\textbf{X}^T\\textbf{y} \\quad \\text{} \\quad \\Sigma^*(\\rho)=(1-\\rho)\\Sigma+\\rho v \\textbf{}_{p+1}. Unlike approach Ledoit Wolf (2004), minimizes MSE covariance matrix, SRR chooses optimal ρ*\\rho^* directly minimizing MSE coefficient estimator. Although ρ*\\rho^* closed form, can selected numerically. approach especially useful design matrix low-rank unstable covariance structure, often encountered high-dimensional collinear settings.","code":""},{"path":[]},{"path":"https://Ziwei-ChenChen.github.io/savvySh/articles/savvySh.html","id":"simulation-examples","dir":"Articles","previous_headings":"","what":"Simulation Examples","title":"savvySh: Shrinkage Methods for Linear Regression Estimation","text":"section presents set simulation studies demonstrate performance shrinkage estimators implemented savvySh. compare OLS using synthetic datasets. performance metric L2L_2 distance estimated coefficients true parameter vector. Lower L2L_2 values indicate better recovery true coefficients. explore several generative scenarios based design matrix error distribution. structure design matrix includes different forms correlation dependence. simulation followed table comparing L2L_2 distances estimated coefficients. following data-generating processes (DGPs) considered: Multivariate Gaussian distributed covariates Toeplitz covariance matrix - N(𝛍,𝚿(ρ))N(\\pmb{\\mu}, \\pmb{\\Psi}(\\rho)) 𝚿st(ρ)=ρ|s−t|\\pmb{\\Psi}_{st}(\\rho) = \\rho^{|s-t|} 1≤s,t≤p1 \\leq s, t \\leq p, , 𝛍=(μ1,μ2,…,μp)T\\pmb{\\mu} = (\\mu_1, \\mu_2, \\ldots, \\mu_p)^T mean vector, 𝚿(ρ)\\pmb{\\Psi}(\\rho) covariance matrix, ρ\\rho represents correlation coefficient controls dependence covariates. response generated using normal noise. Student’s tt distributed Multivariate Gaussian distributed covariates Toeplitz covariance matrix - N(𝛍,𝚿(ρ))N(\\pmb{\\mu}, \\pmb{\\Psi}(\\rho)) 𝚿st(ρ)=ρ|s−t|\\pmb{\\Psi}_{st}(\\rho) = \\rho^{|s-t|} 1≤s,t≤p1 \\leq s, t \\leq p. , 𝛍=(μ1,μ2,…,μp)T\\pmb{\\mu} = (\\mu_1, \\mu_2, \\ldots, \\mu_p)^T mean vector, 𝚿(ρ)\\pmb{\\Psi}(\\rho) covariance matrix, ρ\\rho represents correlation coefficient controls dependence covariates. response includes heavier-tailed variation. Multivariate Gaussian Copula Binomial marginal distributed covariates Toeplitz covariance matrix - 𝐙i∼N(𝟎,Ψ(ρ))\\textbf{Z}_i\\sim N(\\textbf{0}, \\Psi(\\rho)) Xik=F−1(Φ(Zik))X_{ik} = F^{-1}(\\Phi(Z_{ik})), 1≤k≤p1 \\leq k \\leq p Φ\\Phi cumulative distribution function (CDF) N(0,1)N(0,1), F−1F^{-1} inverse CDF binomial distribution. Latent Space Features - Covariates generated combining low-rank structure random variations, Specifically, simulate 𝐗=𝐀𝐙+𝐄\\mathbf{X} = \\mathbf{} \\mathbf{Z} + \\mathbf{E}, 𝐀\\mathbf{} n×fn \\times f matrix factor loadings entries drawn independently standard normal distribution N(0,1)N(0,1), 𝐙\\mathbf{Z} f×pf \\times p matrix latent factors, also entries drawn independently N(0,1)N(0,1). term 𝐄\\mathbf{E} n×pn \\times p matrix independent Gaussian noise variance 10−610^{-6}, .e., N(0,10−6)N(0,10^{-6}). four settings, true regression coefficient vector alternates sign increasing magnitude, making possible assess shrinkage effect across varying coefficient scales. Note: Due differences underlying libraries random number generation implementations (e.g., BLAS/LAPACK RNG behavior), data generated functions like mvrnorm may differ slightly Windows macOS/Linux, even seed.","code":""},{"path":"https://Ziwei-ChenChen.github.io/savvySh/articles/savvySh.html","id":"multiplicative-shrinkage-and-slab-regression","dir":"Articles","previous_headings":"Simulation Examples","what":"Multiplicative Shrinkage and Slab Regression","title":"savvySh: Shrinkage Methods for Linear Regression Estimation","text":"section shows savvySh implements multiplicative shrinkage including St, DSh, Sh; Slab Shrinkage including SR GSR. method compared OLS.","code":""},{"path":"https://Ziwei-ChenChen.github.io/savvySh/articles/savvySh.html","id":"multivariate-gaussian-distribution","dir":"Articles","previous_headings":"Simulation Examples > Multiplicative Shrinkage and Slab Regression","what":"Multivariate Gaussian Distribution","title":"savvySh: Shrinkage Methods for Linear Regression Estimation","text":"example corresponds Multivariate Gaussian distributed covariates Toeplitz covariance matrix setup described . simulate design matrix multivariate normal distribution Toeplitz covariance matrix. response generated Gaussian noise variance σ2=25\\sigma^2 = 25. tables report results estimator: first table shows L2L_2 distance estimated coefficient vector ground truth, second table displays actual estimated coefficients (rounded) method alongside true values. L2 Distance Estimated True Coefficients Estimated Coefficients Method (rounded)","code":"# Load packages library(savvySh) library(MASS) library(knitr)  # Parameters set.seed(123) n_val <- 1000 p_val <- 10 rho_val <- 0.75 sigma_val <- 5 mu_val <- 0  # Correlation matrix sigma.rho <- function(rho_val, p_val) {   rho_val ^ abs(outer(1:p_val, 1:p_val, \"-\")) }  # True beta theta_func <- function(p_val) {   sgn <- rep(c(1, -1), length.out = p_val)   mag <- ceiling(seq_len(p_val) / 2)   sgn * mag }  # Simulate data Sigma <- sigma.rho(rho_val, p_val) X <- mvrnorm(n_val, mu = rep(mu_val, p_val), Sigma = Sigma) X_intercept <- cbind(1, X) beta_true <- theta_func(p_val + 1) y <- rnorm(n_val, mean = X_intercept %*% beta_true, sd = sigma_val)  # Fit models ols_fit <- lm(y ~ X) beta_ols <- coef(ols_fit)  multi_results <- savvySh(X, y, model_class = \"Multiplicative\", include_Sh = TRUE) beta_St  <- coef(multi_results, \"St\") beta_DSh <- coef(multi_results, \"DSh\") beta_Sh  <- coef(multi_results, \"Sh\")  slab_results <- savvySh(X, y, model_class = \"Slab\") beta_SR  <- coef(slab_results, \"SR\") beta_GSR <- coef(slab_results, \"GSR\") # L2 comparison l2_table <- data.frame(   Method = c(\"OLS\", \"St\", \"DSh\", \"Sh\", \"SR\", \"GSR\"),   L2_Distance = c(     sqrt(sum((beta_ols - beta_true)^2)),     sqrt(sum((beta_St  - beta_true)^2)),     sqrt(sum((beta_DSh - beta_true)^2)),     sqrt(sum((beta_Sh  - beta_true)^2)),     sqrt(sum((beta_SR  - beta_true)^2)),     sqrt(sum((beta_GSR - beta_true)^2))   ) )  kable(l2_table, digits = 4, caption = \"L2 Distance Between Estimated and True Coefficients\") # Coefficient comparison table coef_table <- data.frame(   Term = names(beta_ols),   OLS = round(beta_ols, 3),   St = round(beta_St, 3),   DSh = round(beta_DSh, 3),   Sh = round(beta_Sh, 3),   SR = round(beta_SR, 3),   GSR = round(beta_GSR, 3),   True = round(beta_true, 3) )  kable(coef_table, caption = \"Estimated Coefficients by Method (rounded)\")"},{"path":"https://Ziwei-ChenChen.github.io/savvySh/articles/savvySh.html","id":"students-t-distribution","dir":"Articles","previous_headings":"Simulation Examples > Multiplicative Shrinkage and Slab Regression","what":"Student’s t Distribution","title":"savvySh: Shrinkage Methods for Linear Regression Estimation","text":"example corresponds Student’s tt distributed Multivariate Gaussian distributed covariates Toeplitz covariance matrix setup. repeat design , instead Gaussian noise, add scaled tt-distributed noise degrees freedom ν=5024\\nu = \\frac{50}{24}. tables report results estimator: first table shows L2L_2 distance estimated coefficient vector ground truth, second table displays actual estimated coefficients (rounded) method alongside true values. L2 Distance Estimated True Coefficients Estimated Coefficients Method (rounded)","code":"# Load packages library(savvySh) library(MASS) library(knitr)  # Parameters set.seed(123) n_val <- 1000 p_val <- 10 rho_val <- 0.75 df_val = 50/24  mu_val <- 0  # Correlation matrix sigma.rho <- function(rho_val, p_val) {   rho_val ^ abs(outer(1:p_val, 1:p_val, \"-\")) }  # True beta theta_func <- function(p_val) {   sgn <- rep(c(1, -1), length.out = p_val)   mag <- ceiling(seq_len(p_val) / 2)   sgn * mag }  # Simulate data Sigma <- sigma.rho(rho_val, p_val) X <- mvrnorm(n_val, mu = rep(mu_val, p_val), Sigma = Sigma) X_intercept <- cbind(1, X) beta_true <- theta_func(p_val + 1) y <- as.vector(X_intercept %*% beta_true) + rt(n = n_val, df = df_val)  # Fit models ols_fit <- lm(y ~ X) beta_ols <- coef(ols_fit)  multi_results <- savvySh(X, y, model_class = \"Multiplicative\", include_Sh = TRUE) beta_St  <- coef(multi_results, \"St\") beta_DSh <- coef(multi_results, \"DSh\") beta_Sh  <- coef(multi_results, \"Sh\")  slab_results <- savvySh(X, y, model_class = \"Slab\") beta_SR  <- coef(slab_results, \"SR\") beta_GSR <- coef(slab_results, \"GSR\") # L2 comparison l2_table <- data.frame(   Method = c(\"OLS\", \"St\", \"DSh\", \"Sh\", \"SR\", \"GSR\"),   L2_Distance = c(     sqrt(sum((beta_ols - beta_true)^2)),     sqrt(sum((beta_St  - beta_true)^2)),     sqrt(sum((beta_DSh - beta_true)^2)),     sqrt(sum((beta_Sh  - beta_true)^2)),     sqrt(sum((beta_SR  - beta_true)^2)),     sqrt(sum((beta_GSR - beta_true)^2))   ) )  kable(l2_table, digits = 4, caption = \"L2 Distance Between Estimated and True Coefficients\") # Coefficient comparison table coef_table <- data.frame(   OLS = round(beta_ols, 3),   St = round(beta_St, 3),   DSh = round(beta_DSh, 3),   Sh = round(beta_Sh, 3),   SR = round(beta_SR, 3),   GSR = round(beta_GSR, 3),   True = round(beta_true, 3) )  kable(coef_table, caption = \"Estimated Coefficients by Method (rounded)\")"},{"path":"https://Ziwei-ChenChen.github.io/savvySh/articles/savvySh.html","id":"gaussian-copula-with-binomial-margins","dir":"Articles","previous_headings":"Simulation Examples > Multiplicative Shrinkage and Slab Regression","what":"Gaussian Copula with Binomial Margins","title":"savvySh: Shrinkage Methods for Linear Regression Estimation","text":"example corresponds Multivariate Gaussian Copula Binomial marginal distributed covariates Toeplitz covariance matrix setup. covariates transformed Gaussian copula Binomial marginals using inverse CDF transform. simulates discrete predictor variables. tables report results estimator: first table shows L2L_2 distance estimated coefficient vector ground truth, second table displays actual estimated coefficients (rounded) method alongside true values. L2 Distance Estimated True Coefficients Estimated Coefficients Method (rounded)","code":"# Load packages library(savvySh) library(MASS) library(knitr)  # Parameters set.seed(123) n_val <- 1000 p_val <- 10 rho_val <- 0.75 q_0 <- 0.01  # Correlation matrix sigma.rho <- function(rho_val, p_val) {   rho_val ^ abs(outer(1:p_val, 1:p_val, \"-\")) }  sigma.temp <- sigma.rho(rho_val, p_val)  Z <- mvrnorm(n_val, mu = rep(0, p_val), Sigma = sigma.temp)  X <- apply(Z, 2, function(z_col) qbinom(pnorm(z_col), size = 2, prob = q_0))   X_intercept <- cbind(1, X) beta_true <- c(0, runif(p_val, 0.01, 0.3)) y <- rnorm(n_val, mean = as.vector(X_intercept %*% beta_true), sd = sigma_val)  # Fit models ols_fit <- lm(y ~ X) beta_ols <- coef(ols_fit)  multi_results <- savvySh(X, y, model_class = \"Multiplicative\", include_Sh = TRUE) beta_St  <- coef(multi_results, \"St\") beta_DSh <- coef(multi_results, \"DSh\") beta_Sh  <- coef(multi_results, \"Sh\")  slab_results <- savvySh(X, y, model_class = \"Slab\") beta_SR  <- coef(slab_results, \"SR\") beta_GSR <- coef(slab_results, \"GSR\") # L2 comparison l2_table <- data.frame(   Method = c(\"OLS\", \"St\", \"DSh\", \"Sh\", \"SR\", \"GSR\"),   L2_Distance = c(     sqrt(sum((beta_ols - beta_true)^2)),     sqrt(sum((beta_St  - beta_true)^2)),     sqrt(sum((beta_DSh - beta_true)^2)),     sqrt(sum((beta_Sh  - beta_true)^2)),     sqrt(sum((beta_SR  - beta_true)^2)),     sqrt(sum((beta_GSR - beta_true)^2))   ) )  kable(l2_table, digits = 4, caption = \"L2 Distance Between Estimated and True Coefficients\") # Coefficient comparison table coef_table <- data.frame(   OLS = round(beta_ols, 3),   St = round(beta_St, 3),   DSh = round(beta_DSh, 3),   Sh = round(beta_Sh, 3),   SR = round(beta_SR, 3),   GSR = round(beta_GSR, 3),   True = round(beta_true, 3) )  kable(coef_table, caption = \"Estimated Coefficients by Method (rounded)\")"},{"path":"https://Ziwei-ChenChen.github.io/savvySh/articles/savvySh.html","id":"linear-shrinkage-1","dir":"Articles","previous_headings":"Simulation Examples","what":"Linear Shrinkage","title":"savvySh: Shrinkage Methods for Linear Regression Estimation","text":"section describes LSh estimator, shrinks OLS coefficients (origin) toward target based diagonal Σ\\Sigma. method assumes standardized data.","code":""},{"path":"https://Ziwei-ChenChen.github.io/savvySh/articles/savvySh.html","id":"multivariate-gaussian-distribution-1","dir":"Articles","previous_headings":"Simulation Examples > Linear Shrinkage","what":"Multivariate Gaussian Distribution","title":"savvySh: Shrinkage Methods for Linear Regression Estimation","text":"example corresponds Multivariate Gaussian distributed covariates Toeplitz covariance matrix setup. simulate Gaussian design Toeplitz correlation, using additive Gaussian noise variance σ2=25\\sigma^2 = 25. Centering applied estimation. tables report results estimator: first table shows L2L_2 distance estimated coefficient vector ground truth, second table displays actual estimated coefficients (rounded) method alongside true values. L2 Distance Estimated True Coefficients Estimated Coefficients Method (rounded)","code":"# Load packages library(savvySh) library(MASS) library(knitr)  # Parameters set.seed(123) n_val <- 1000 p_val <- 10 rho_val <- 0.75 sigma_val <- 5 mu_val <- 0  # Correlation matrix sigma.rho <- function(rho_val, p_val) {   rho_val ^ abs(outer(1:p_val, 1:p_val, \"-\")) }  # True beta theta_func <- function(p_val) {   sgn <- rep(c(1, -1), length.out = p_val)   mag <- ceiling(seq_len(p_val) / 2)   sgn * mag }  # Simulate data Sigma <- sigma.rho(rho_val, p_val) X <- mvrnorm(n_val, mu = rep(mu_val, p_val), Sigma = Sigma) X_centred <- scale(X, center = TRUE, scale = FALSE) beta_true <- theta_func(p_val) y <- rnorm(n_val, mean = X_centred %*% beta_true, sd = sigma_val) y_centred <- scale(y, center = TRUE, scale = FALSE)  # Fit models ols_fit <- lm(y_centred ~ X_centred-1) beta_ols <- coef(ols_fit)  linear_results <- savvySh(X_centred, y_centred, model_class = \"Linear\") beta_LSh <- coef(linear_results, \"LSh\") # L2 comparison l2_table <- data.frame(   Method = c(\"OLS\", \"LSh\"),   L2_Distance = c(     sqrt(sum((beta_ols - beta_true)^2)),     sqrt(sum((beta_LSh  - beta_true)^2))   ) )  kable(l2_table, digits = 4, caption = \"L2 Distance Between Estimated and True Coefficients\") # Coefficient comparison table coef_table <- data.frame(   OLS = round(beta_ols, 3),   LSh = round(beta_LSh, 3),   True = round(beta_true, 3) )  kable(coef_table, caption = \"Estimated Coefficients by Method (rounded)\")"},{"path":"https://Ziwei-ChenChen.github.io/savvySh/articles/savvySh.html","id":"students-t-distribution-1","dir":"Articles","previous_headings":"Simulation Examples > Linear Shrinkage","what":"Student’s t Distribution","title":"savvySh: Shrinkage Methods for Linear Regression Estimation","text":"example corresponds Student’s tt distributed Multivariate Gaussian distributed covariates Toeplitz covariance matrix setup. repeat setup replace Gaussian noise tt-distributed noise degrees freedom ν=5024\\nu = \\frac{50}{24}. Centering applied estimation. tables report results estimator: first table shows L2L_2 distance estimated coefficient vector ground truth, second table displays actual estimated coefficients (rounded) method alongside true values. L2 Distance Estimated True Coefficients Estimated Coefficients Method (rounded)","code":"# Load packages library(savvySh) library(MASS) library(knitr)  # Parameters set.seed(123) n_val <- 1000 p_val <- 10 df_val = 50/24  sigma_val <- 5 mu_val <- 0  # Correlation matrix sigma.rho <- function(rho_val, p_val) {   rho_val ^ abs(outer(1:p_val, 1:p_val, \"-\")) }  # True beta theta_func <- function(p_val) {   sgn <- rep(c(1, -1), length.out = p_val)   mag <- ceiling(seq_len(p_val) / 2)   sgn * mag }  # Simulate data Sigma <- sigma.rho(rho_val, p_val) X <- mvrnorm(n_val, mu = rep(mu_val, p_val), Sigma = Sigma) X_centred <- scale(X, center = TRUE, scale = FALSE) beta_true <- theta_func(p_val) y <- as.vector(X_centred %*% beta_true) + rt(n = n_val, df = df_val) y_centred <- scale(y, center = TRUE, scale = FALSE)  # Fit models ols_fit <- lm(y_centred ~ X_centred-1) beta_ols <- coef(ols_fit)  linear_results <- savvySh(X_centred, y_centred, model_class = \"Linear\") beta_LSh <- coef(linear_results, \"LSh\") # L2 comparison l2_table <- data.frame(   Method = c(\"OLS\", \"LSh\"),   L2_Distance = c(     sqrt(sum((beta_ols - beta_true)^2)),     sqrt(sum((beta_LSh  - beta_true)^2))   ) )  kable(l2_table, digits = 4, caption = \"L2 Distance Between Estimated and True Coefficients\") # Coefficient comparison table coef_table <- data.frame(   OLS = round(beta_ols, 3),   LSh = round(beta_LSh, 3),   True = round(beta_true, 3) )  kable(coef_table, caption = \"Estimated Coefficients by Method (rounded)\")"},{"path":"https://Ziwei-ChenChen.github.io/savvySh/articles/savvySh.html","id":"shrinkage-ridge-regression-1","dir":"Articles","previous_headings":"Simulation Examples","what":"Shrinkage Ridge Regression","title":"savvySh: Shrinkage Methods for Linear Regression Estimation","text":"SRR estimator improves upon RR replacing Σ\\Sigma convex combination Σ\\Sigma scaled identity matrix, chosen minimize MSE coefficients.","code":""},{"path":"https://Ziwei-ChenChen.github.io/savvySh/articles/savvySh.html","id":"latent-space-features","dir":"Articles","previous_headings":"Simulation Examples > Shrinkage Ridge Regression","what":"Latent Space Features","title":"savvySh: Shrinkage Methods for Linear Regression Estimation","text":"example corresponds Latent Space Features setup. , covariates generated using latent factor model small amount additive Gaussian noise. simulates low-rank structure design matrix. compare ridge regression estimates using glmnet SRR savvySh. tables report results estimator: first table shows L2L_2 distance estimated coefficient vector ground truth, second table displays actual estimated coefficients (rounded) method alongside true values. L2 Distance Estimated True Coefficients Estimated Coefficients Method (rounded)","code":"# Load packages library(savvySh) library(MASS) library(glmnet) #> Loading required package: Matrix #> Loaded glmnet 4.1-8 library(knitr)  # Parameters set.seed(123) n_val <- 1000 p_val <- 10 f_val <- 5 sigma_val <- 5  # True beta theta_func <- function(p_val) {   sgn <- rep(c(1, -1), length.out = p_val)   mag <- ceiling(seq_len(p_val) / 2)   sgn * mag }  A <- matrix(rnorm(n_val * f_val), nrow = n_val)   Z <- matrix(rnorm(f_val * p_val), nrow = f_val)  X <- A %*% Z  # n x p matrix noise <- matrix(rnorm(n_val * p_val, sd = sqrt(10^(-6))), nrow = n_val) X_noisy <- X + noise X_intercept <- cbind(rep(1, n_val), X_noisy) beta_true <- theta_func(p_val + 1) y <- rnorm(n_val,mean=as.vector(X_intercept%*%beta_true),sd=sigma_val)  # Fit models glmnet_fit <- cv.glmnet(X, y, alpha = 0) lambda_min_RR_glmnet <- glmnet_fit$lambda.min beta_RR <- as.vector(coef(glmnet_fit, s = \"lambda.min\"))  SRR_results <- savvySh(X, y, model_class = \"ShrinkageRR\") beta_SRR <- coef(SRR_results, \"SRR\") # L2 comparison l2_table <- data.frame(   Method = c(\"RR\", \"SRR\"),   L2_Distance = c(     sqrt(sum((beta_RR - beta_true)^2)),     sqrt(sum((beta_SRR  - beta_true)^2))   ) )  kable(l2_table, digits = 4, caption = \"L2 Distance Between Estimated and True Coefficients\") # Coefficient comparison table coef_table <- data.frame(   OLS = round(beta_RR, 3),   LSh = round(beta_SRR, 3),   True = round(beta_true, 3) )  kable(coef_table, caption = \"Estimated Coefficients by Method (rounded)\")"},{"path":"https://Ziwei-ChenChen.github.io/savvySh/articles/savvySh.html","id":"real-data-analysis","dir":"Articles","previous_headings":"","what":"Real Data Analysis","title":"savvySh: Shrinkage Methods for Linear Regression Estimation","text":"section provides example code references applying shrinkage estimators implemented savvySh real-world datasets. applications demonstrate shrinkage methods can used areas generalized linear models, portfolio investment, fine-mapping genetics. run code present specific results ; instead, offer clean, reproducible examples users can adapt. Full details preprocessing steps can found relevant repositories main paper. cybersickness dataset used illustrating shrinkage GLMs using Poisson model. main Shrinkage GLMs function part related package savvyGLM, can find . returns_441 dataset contains portfolio returns used demonstrating shrinkage estimation financial asset allocation. Statistical Fine-Mapping Application demonstrates use shrinkage-based estimators genetic context. provide detailed descriptions , full R code analysis—including data preparation model fitting—available :flashfm-savvySh.","code":""},{"path":"https://Ziwei-ChenChen.github.io/savvySh/articles/savvySh.html","id":"cybersickness-data","dir":"Articles","previous_headings":"Real Data Analysis","what":"Cybersickness data","title":"savvySh: Shrinkage Methods for Linear Regression Estimation","text":"example demonstrates apply Poisson GLMs various shrinkage estimators dataset related cybersickness severity scores. use cybersickness_10lags dataset, included package data/cybersickness_10lags.rda. response variable ordinal grouped four categories. goal predict ordinal outcome using lagged predictors. show preprocess, fit models, evaluate prediction performance using metrics MSE, RMSE, MAE.","code":"library(savvySh) library(savvyGLM) library(MASS)  standardize_features<-function(dataset){     dataset[2:(ncol(dataset)-1)] <- as.data.frame(scale(dataset[2:(ncol(dataset)-1)]))    return(dataset) }  set_classes<-function(data){     data[,ncol(data)]<-replace(data[,ncol(data)], data[,ncol(data)]<1, 0)    data[,ncol(data)]<-replace(data[,ncol(data)], data[,ncol(data)] %in% c(1,2,2.5,3,3.5), 1)    data[,ncol(data)]<-replace(data[,ncol(data)], data[,ncol(data)] %in% c(4,5,6), 2)    data[,ncol(data)]<-replace(data[,ncol(data)], data[,ncol(data)]>=7, 3)    return(data) } fit_and_return_coefficients <- function(x, y) {      control_list <- list(maxit = 200, epsilon = 1e-6, trace = TRUE)   family_type <- poisson(link = \"log\")      # Fitting models   opt_glm2_OLS <- glm.fit2(x, y, control = control_list, family = family_type)   opt_glm2_SR <- savvy_glm.fit2(x, y, model_class = \"SR\", control = control_list, family = family_type)   opt_glm2_GSR <- savvy_glm.fit2(x, y, model_class = \"GSR\", control = control_list, family = family_type)   opt_glm2_St <- savvy_glm.fit2(x, y, model_class = \"St\", control = control_list, family = family_type)   opt_glm2_DSh <- savvy_glm.fit2(x, y, model_class = \"DSh\", control = control_list, family = family_type)   opt_glm2_Sh <- savvy_glm.fit2(x, y, model_class = \"Sh\", control = control_list, family = family_type)      # Return a list of coefficients   return(list(     glm2_OLS_result = opt_glm2_OLS$coefficients,     glm2_SR_result = opt_glm2_SR$coefficients,     glm2_GSR_result = opt_glm2_GSR$coefficients,     glm2_St_result = opt_glm2_St$coefficients,     glm2_DSh_result = opt_glm2_DSh$coefficients,     glm2_Sh_result = opt_glm2_Sh$coefficients   )) }  test_model <- function(glm_coefficients, data_X, data_Y) {      upper_limit <- 3  # =3 for 4 classes; =9 for 10 classes      ### Model 1 ---> OLS ###   predicted_glm2_OLS <- floor(exp(data_X %*% as.matrix(glm_coefficients$glm2_OLS_result)))   predicted_glm2_OLS <- ifelse(predicted_glm2_OLS <= upper_limit, predicted_glm2_OLS, upper_limit)      ### Model 2 ---> SR ###   predicted_glm2_SR <- floor(exp(data_X %*% as.matrix(glm_coefficients$glm2_SR_result)))   predicted_glm2_SR <- ifelse(predicted_glm2_SR <= upper_limit, predicted_glm2_SR, upper_limit)      ### Model 3 ---> GSR ###   predicted_glm2_GSR <- floor(exp(data_X %*% as.matrix(glm_coefficients$glm2_GSR_result)))   predicted_glm2_GSR <- ifelse(predicted_glm2_GSR <= upper_limit, predicted_glm2_GSR, upper_limit)      ### Model 4 ---> St ###   predicted_glm2_St <- floor(exp(data_X %*% as.matrix(glm_coefficients$glm2_St_result)))   predicted_glm2_St <- ifelse(predicted_glm2_St <= upper_limit, predicted_glm2_St, upper_limit)      ### Model 5 ---> DSh ###   predicted_glm2_DSh <- floor(exp(data_X %*% as.matrix(glm_coefficients$glm2_DSh_result)))   predicted_glm2_DSh <- ifelse(predicted_glm2_DSh <= upper_limit, predicted_glm2_DSh, upper_limit)      ### Model 6 ---> Sh ###   predicted_glm2_Sh <- floor(exp(data_X %*% as.matrix(glm_coefficients$glm2_Sh_result)))   predicted_glm2_Sh <- ifelse(predicted_glm2_Sh <= upper_limit, predicted_glm2_Sh, upper_limit)      print(max(predicted_glm2_OLS))   print(max(predicted_glm2_SR))      r_OLS <- c(mse(data_Y, predicted_glm2_OLS), rmse(data_Y, predicted_glm2_OLS), mae(data_Y, predicted_glm2_OLS))   r_SR <- c(mse(data_Y, predicted_glm2_SR), rmse(data_Y, predicted_glm2_SR), mae(data_Y, predicted_glm2_SR))   r_GSR <- c(mse(data_Y, predicted_glm2_GSR), rmse(data_Y, predicted_glm2_GSR), mae(data_Y, predicted_glm2_GSR))   r_St <- c(mse(data_Y, predicted_glm2_St), rmse(data_Y, predicted_glm2_St), mae(data_Y, predicted_glm2_St))   r_DSh <- c(mse(data_Y, predicted_glm2_DSh), rmse(data_Y, predicted_glm2_DSh), mae(data_Y, predicted_glm2_DSh))   r_Sh <- c(mse(data_Y, predicted_glm2_Sh), rmse(data_Y, predicted_glm2_Sh), mae(data_Y, predicted_glm2_Sh))      return(list(     results_OLS = r_OLS,     results_SR = r_SR,     results_GSR = r_GSR,     results_St = r_St,     results_DSh = r_DSh,     results_Sh = r_Sh   )) } out_of_sample_performance <- function(percentage = 0.3, no_trials = 50, datain = cybersickness_10lags, fileout = \"results10.csv\") {      data <- datain   agregated_results<-rep(0,4*3)   data<-set_classes(data)      data<-standardize_features(data)      for (r in 1:no_trials){     bound <- floor(nrow(data)*(1-percentage))      data <- data[sample(nrow(data)), ]           train <- data[1:bound, ]                 test <- data[(bound+1):nrow(data), ]          X.tilde <- train[,-ncol(train)]     X <-  X.tilde[,-1]     train_X <- as.matrix(train[,-ncol(train)])     train_Y <-  train[,ncol(train)]     glm_coefficients<-fit_and_return_coefficients(train_X, train_Y)          test_X <- as.matrix(test[,-ncol(test)])     test_Y <-  as.matrix(test[,ncol(test)])     results<-test_model(glm_coefficients, test_X, test_Y)     agregated_results<-agregated_results+unlist(results)   }      df <- data.frame(matrix(unlist(agregated_results), nrow=length(results), byrow=TRUE))   colnames(df) <- c(\"MSE\", \"RMSE\", \"MAE\")   rownames(df) <- c(\"GLM2\", \"SR\", \"GSR\", \"St\", \"DSh\", \"Sh\")   write.csv(df, fileout) }  datain <- cybersickness_10lags output_file_path <- \"results10.csv\"  run_performance_test <- out_of_sample_performance(   percentage = 0.3,            no_trials = 50,               datain = datain,     fileout = output_file_path  )"},{"path":"https://Ziwei-ChenChen.github.io/savvySh/articles/savvySh.html","id":"portfolio-investment","dir":"Articles","previous_headings":"Real Data Analysis","what":"Portfolio Investment","title":"savvySh: Shrinkage Methods for Linear Regression Estimation","text":"second example applies shrinkage methods asset return data constructing optimal portfolios. use returns_441 dataset, included package data/returns_441.rda. dataset consists daily returns 441 stocks including index, Date formatted YYYYMMDD. rolling window, : Fit multiple regression-based models (OLS, RR, St, DSh, Sh, SR, GSR, SRR). Extract estimated coefficients compute portfolio weights. Simulate --sample portfolio performance. Compute rolling statistics: expected annual returns, volatility, Sharpe ratios.","code":"library(savvySh) library(MASS) library(glmnet) library(PerformanceAnalytics) library(lubridate) library(quadprog) library(xts)  data <- returns_441 data$Date <- as.Date(as.character(data$Date), format = \"%Y%m%d\") colnames(data)[2:442] <- paste0(\"Company\", 1:441)  training_size <- 5 * 252   testing_size  <- 3 * 21   step_size     <- 3 * 21    n_total <- nrow(data) max_windows <- floor((n_total - training_size - testing_size) / step_size) + 1 cat(\"Total rows:\", n_total, \"\\n\") cat(\"Max windows:\", max_windows, \"\\n\")  get_full_weights <- function(est_vector) {   w <- est_vector[-1]         w_last <- 1 - sum(w)       return(c(w, w_last)) } rolling_annual_expected_returns <- data.frame() rolling_annual_sharpe_ratios <- data.frame() rolling_annual_volatilities <- data.frame() for (window_index in seq_len(max_windows)) {   start_index <- 1 + (window_index - 1) * step_size   train_start <- start_index   train_end   <- start_index + training_size - 1   test_start  <- train_end + 1   test_end    <- train_end + testing_size      train_data <- data[train_start:train_end, ]   test_data  <- data[test_start:test_end, ]   train_returns <- as.matrix(train_data[, -1])     test_returns  <- as.matrix(test_data[, -1])    Y_train <- train_returns[, 441]   X_train <- matrix(Y_train, nrow = nrow(train_returns), ncol = 440) - train_returns[, 1:440]      beta_ols <- coef(lm(Y_train ~ X_train))   glmnet_fit <- cv.glmnet(X_train, Y_train, alpha = 0)   lambda_min_RR_glmnet <- glmnet_fit$lambda.min   beta_RR <- as.vector(coef(glmnet_fit, s = \"lambda.min\"))   multi_results <- savvySh(X_train, Y_train, model_class = \"Multiplicative\", include_Sh = TRUE)   slab_results <- savvySh(X_train, Y_train, model_class = \"Slab\")   srr_results <- savvySh(X_train, Y_train, model_class = \"ShrinkageRR\")      est_results <- list(     OLS  = beta_ols,     RR   = beta_RR,     St   = coef(multi_results, \"St\"),     DSh  = coef(multi_results, \"DSh\"),     Sh   = coef(multi_results, \"Sh\"),      SR   = coef(slab_results, \"SR\"),     GSR  = coef(slab_results, \"GSR\"),     SRR  = coef(srr_results, \"SRR\")   )   weights_list <- lapply(est_results, get_full_weights)   names(weights_list) <- names(est_results)      test_dates <- as.Date(test_data$Date)   test_returns_xts <- xts(test_returns, order.by = test_dates)   daily_returns_list <- lapply(weights_list, function(w) {     rp <- Return.portfolio(R = test_returns_xts, weights = w)     return(as.numeric(rp))   })      daily_values_list <- lapply(daily_returns_list, function(r) {     cum_val <- cumprod(1 + r)     return(cum_val)   })      model_names <- names(daily_returns_list)   n_test <- length(test_start:test_end)   daily_values_mat <- matrix(0, nrow = length(model_names), ncol = n_test)   daily_returns_mat <- matrix(0, nrow = length(model_names), ncol = n_test)   rownames(daily_values_mat) <- model_names   rownames(daily_returns_mat) <- model_names      for (i in seq_along(model_names)) {     daily_values_mat[i, ]  <- daily_values_list[[i]]     daily_returns_mat[i, ] <- daily_returns_list[[i]]   }      expected_daily_returns <- rowMeans(daily_returns_mat)   annual_returns <- (1 + expected_daily_returns)^252 - 1   daily_vols <- apply(daily_returns_mat, 1, sd)   annual_vols <- daily_vols * sqrt(252)   annual_sharp <- annual_returns / annual_vols    window_result_returns <- as.data.frame(t(annual_returns))   window_result_returns$Window <- window_index   rolling_annual_expected_returns <- rbind(rolling_annual_expected_returns, window_result_returns)      window_result_sharpe <- as.data.frame(t(annual_sharp))   window_result_sharpe$Window <- window_index   rolling_annual_sharpe_ratios <- rbind(rolling_annual_sharpe_ratios, window_result_sharpe)      window_result_vols <- as.data.frame(t(annual_vols))   window_result_vols$Window <- window_index   rolling_annual_volatilities <- rbind(rolling_annual_volatilities, window_result_vols)      window_label <- paste0(\"window_\", window_index)   write.csv(daily_values_mat,              file = paste0(\"daily_portfolio_values_\", window_label, \".csv\"),              row.names = TRUE)   write.csv(daily_returns_mat,              file = paste0(\"daily_portfolio_returns_\", window_label, \".csv\"),              row.names = TRUE)      cat(\"Completed window\", window_index,       \": Training rows [\", train_start, \"to\", train_end,        \"] (Dates:\", format(train_data$Date[1], \"%Y-%m-%d\"),        \"to\", format(train_data$Date[nrow(train_data)], \"%Y-%m-%d\"),        \"), Testing rows [\", test_start, \"to\", test_end,        \"] (Dates:\", format(test_data$Date[1], \"%Y-%m-%d\"),        \"to\", format(test_data$Date[nrow(test_data)], \"%Y-%m-%d\"), \")\\n\") }"},{"path":"https://Ziwei-ChenChen.github.io/savvySh/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Ziwei Chen. Author, maintainer.           0009-0009-6376-3850 Vali Asimit. Author.           0000-0002-7706-0066 Marina Anca Cidota. Author.           0009-0004-9505-7233 Jennifer Asimit. Author.           0000-0002-4857-2249","code":""},{"path":"https://Ziwei-ChenChen.github.io/savvySh/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Chen Z, Asimit V, Cidota M, Asimit J (2025). savvySh: Slab Shrinkage Linear Regression Estimation. R package version 0.1.0, https://Ziwei-ChenChen.github.io/savvySh.","code":"@Manual{,   title = {savvySh: Slab and Shrinkage Linear Regression Estimation},   author = {Ziwei Chen and Vali Asimit and Marina Anca Cidota and Jennifer Asimit},   year = {2025},   note = {R package version 0.1.0},   url = {https://Ziwei-ChenChen.github.io/savvySh}, }"},{"path":"https://Ziwei-ChenChen.github.io/savvySh/index.html","id":"savvysh-shrinkage-methods-for-linear-regression-estimation","dir":"","previous_headings":"","what":"Slab and Shrinkage Linear Regression Estimation","title":"Slab and Shrinkage Linear Regression Estimation","text":"savvySh package provides unified interface fitting shrinkage estimators linear regression, particularly useful presence multicollinearity high-dimensional covariates. supports four shrinkage classes: Multiplicative Shrinkage, Slab Regression, Linear Shrinkage, Shrinkage Ridge Regression. methods improve classical ordinary least squares (OLS) estimator trading small amount bias significant reduction variance. package builds theoretical work discussed : Asimit, V., Cidota, M. ., Chen, Z., & Asimit, J. (2025). Slab Shrinkage Linear Regression Estimation. official documentation site available : https://Ziwei-ChenChen.github.io/savvySh interested applying shrinkage methods within generalized linear models (GLMs), please refer companion package savvyGLM. can install directly GitHub: enable explore real-data GLM examples shown vignette section documentation website. addition, shrinkage-based methods also applied genetic fine-mapping. code examples context, please see: flashfm-savvySh – dedicated repository demonstrating statistical fine-mapping using shrinkage estimators.","code":"remotes::install_github(\"Ziwei-ChenChen/savvyGLM\")"},{"path":"https://Ziwei-ChenChen.github.io/savvySh/index.html","id":"installation-guide","dir":"","previous_headings":"","what":"Installation Guide","title":"Slab and Shrinkage Linear Regression Estimation","text":"Install development version savvySh GitHub using: installed, load package:","code":"# install.packages(\"devtools\") devtools::install_github(\"Ziwei-ChenChen/savvySh\") library(savvySh)"},{"path":"https://Ziwei-ChenChen.github.io/savvySh/index.html","id":"features","dir":"","previous_headings":"","what":"Features","title":"Slab and Shrinkage Linear Regression Estimation","text":"savvySh provides several shrinkage estimators designed improve regression accuracy reducing MSE: Multiplicative Shrinkage: Applies shrinkage multiplying OLS estimates data-driven factors: Stein (St): Applies single global shrinkage factor coefficients. Diagonal Shrinkage (DSh): Applies separate factor coefficient. Shrinkage (Sh): Uses full matrix shrinkage operator estimated solving Sylvester equation. Slab Regression: Adds structured shrinkage based penalty terms: Slab Regression (SR): Shrinks toward fixed target direction (e.g., vector ones). Generalized Slab Regression (GSR): Shrinks toward multiple directions (e.g., eigenvectors). Linear Shrinkage (LSh): Takes weighted average OLS estimator target estimator useful standardized data. Shrinkage Ridge Regression (SRR): Extends Ridge Regression (RR) shrinking toward diagonal matrix equal entries. shrinkage factors computed closed form (except SRR, optimizes shrinkage intensity numerically).","code":""},{"path":"https://Ziwei-ChenChen.github.io/savvySh/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"Slab and Shrinkage Linear Regression Estimation","text":"basic example shows solve common problem:","code":"# Simulated example set.seed(123) x <- matrix(rnorm(100 * 10), 100, 10) y <- rnorm(100)  # Fit shrinkage estimators fit <- savvySh(x, y, model_class = \"Multiplicative\")  # Extract coefficients coef(fit, estimator = \"St\") coef(fit, estimator = \"DSh\")"},{"path":"https://Ziwei-ChenChen.github.io/savvySh/index.html","id":"authors","dir":"","previous_headings":"","what":"Authors","title":"Slab and Shrinkage Linear Regression Estimation","text":"Ziwei Chen – ziwei.chen.3@citystgeorges.ac.uk Vali Asimit – asimit@citystgeorges.ac.uk Marina Anca Cidota – cidota@fmi.unibuc.ro Jennifer Asimit – jennifer.asimit@mrc-bsu.cam.ac.uk","code":""},{"path":"https://Ziwei-ChenChen.github.io/savvySh/index.html","id":"license","dir":"","previous_headings":"","what":"License","title":"Slab and Shrinkage Linear Regression Estimation","text":"package licensed MIT License.","code":""},{"path":"https://Ziwei-ChenChen.github.io/savvySh/reference/coef.savvySh_model.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract Coefficients for a Slab and Shrinkage Model — coef.savvySh_model","title":"Extract Coefficients for a Slab and Shrinkage Model — coef.savvySh_model","text":"Extracts estimated regression coefficients savvySh_model object, specifying shrinkage estimator return, estimator specified, return fist avaliable estimator chosen model_class.","code":""},{"path":"https://Ziwei-ChenChen.github.io/savvySh/reference/coef.savvySh_model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract Coefficients for a Slab and Shrinkage Model — coef.savvySh_model","text":"","code":"# S3 method for class 'savvySh_model' coef(object, estimator = NULL, ...)"},{"path":"https://Ziwei-ChenChen.github.io/savvySh/reference/coef.savvySh_model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract Coefficients for a Slab and Shrinkage Model — coef.savvySh_model","text":"object fitted model object class savvySh_model (created savvySh). estimator character string naming estimator's coefficients extract. Examples include \"St\", \"DSh\", \"Sh\", \"SR\", \"GSR\", . NULL, first available estimator used. ... Additional arguments passed predict.savvySh_model.","code":""},{"path":"https://Ziwei-ChenChen.github.io/savvySh/reference/coef.savvySh_model.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract Coefficients for a Slab and Shrinkage Model — coef.savvySh_model","text":"named numeric vector regression coefficients. model includes intercept,   appear (Intercept) returned vector.","code":""},{"path":"https://Ziwei-ChenChen.github.io/savvySh/reference/coef.savvySh_model.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Extract Coefficients for a Slab and Shrinkage Model — coef.savvySh_model","text":"function calls predict.savvySh_model internally type = \"coefficients\" retrieve requested coefficient vector. estimator supplied, defaults first available estimator fitted model (example, \"St\", \"DSh\", \"SR\", \"GSR\", etc.). requested estimator exist model object, error raised.","code":""},{"path":[]},{"path":"https://Ziwei-ChenChen.github.io/savvySh/reference/coef.savvySh_model.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Extract Coefficients for a Slab and Shrinkage Model — coef.savvySh_model","text":"Ziwei Chen, Vali Asimit, Marina Anca Cidota, Jennifer Asimit Maintainer: Ziwei Chen <ziwei.chen.3@citystgeorges.ac.uk>","code":""},{"path":"https://Ziwei-ChenChen.github.io/savvySh/reference/cybersickness_10lags.html","id":null,"dir":"Reference","previous_headings":"","what":"Lagged Physiological Covariates for Cybersickness Prediction — cybersickness_10lags","title":"Lagged Physiological Covariates for Cybersickness Prediction — cybersickness_10lags","text":"dataset derived `cybersickness_row` preprocessing original physiological measurements. 22 physiological signals, 10 lagged features created participant time point. lagged covariates, time steps t-1 t-10, used predictors regression modeling cybersickness studies.","code":""},{"path":"https://Ziwei-ChenChen.github.io/savvySh/reference/cybersickness_10lags.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Lagged Physiological Covariates for Cybersickness Prediction — cybersickness_10lags","text":"","code":"cybersickness_10lags"},{"path":"https://Ziwei-ChenChen.github.io/savvySh/reference/cybersickness_10lags.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Lagged Physiological Covariates for Cybersickness Prediction — cybersickness_10lags","text":"object class data.frame 25663 rows 132 columns.","code":""},{"path":"https://Ziwei-ChenChen.github.io/savvySh/reference/cybersickness_10lags.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Lagged Physiological Covariates for Cybersickness Prediction — cybersickness_10lags","text":"preprocessing includes: 1. Creating lagged covariates: physiological signal Xi (= 2 23), new variables created values previous time steps, including Xi(t-1), Xi(t-2), ..., Xi(t-10). 2. avoid overlap outcome covariates, last 10 rows participant removed. preprocessing follows steps outlined https://github.com/shovonis/CyberSicknessClassification/tree/master/data_preprocessing. data frame 25663 rows 132 columns: - Intercept: Intercept column (1s). - X2(t-10) X23(t-1): Lagged features 22 physiological measurements, 10 lags per variable.","code":""},{"path":"https://Ziwei-ChenChen.github.io/savvySh/reference/cybersickness_raw.html","id":null,"dir":"Reference","previous_headings":"","what":"Raw Physiological Measurements for Cybersickness Study — cybersickness_raw","title":"Raw Physiological Measurements for Cybersickness Study — cybersickness_raw","text":"Raw data cybersickness study including heart rate, heart rate variability, percent changes.","code":""},{"path":"https://Ziwei-ChenChen.github.io/savvySh/reference/cybersickness_raw.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Raw Physiological Measurements for Cybersickness Study — cybersickness_raw","text":"","code":"cybersickness_raw"},{"path":"https://Ziwei-ChenChen.github.io/savvySh/reference/cybersickness_raw.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Raw Physiological Measurements for Cybersickness Study — cybersickness_raw","text":"object class data.frame 25893 rows 17 columns.","code":""},{"path":"https://Ziwei-ChenChen.github.io/savvySh/reference/cybersickness_raw.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Raw Physiological Measurements for Cybersickness Study — cybersickness_raw","text":"data frame 25893 rows 17 columns: - Epoch: Time interval index. - HR: Heart Rate. - PC_HR: Percent change Heart Rate. - HR_MIN: Minimum heart rate epoch. - HR_MAX: Maximum heart rate epoch. - HRV: Heart Rate Variability. - PC_HRV: Percent change HRV. - HRV_MIN: Minimum HRV epoch. - HRV_MAX: Maximum HRV epoch. - ...: columns include similar physiological signals. original data can found : https://github.com/shovonis/CyberSicknessClassification/blob/master/lstm_regression/data/raw_data.csv","code":""},{"path":"https://Ziwei-ChenChen.github.io/savvySh/reference/cybersickness_row.html","id":null,"dir":"Reference","previous_headings":"","what":"Raw Physiological Measurements for Cybersickness Study — cybersickness_row","title":"Raw Physiological Measurements for Cybersickness Study — cybersickness_row","text":"Raw data cybersickness study including heart rate, heart rate variability, percent changes.","code":""},{"path":"https://Ziwei-ChenChen.github.io/savvySh/reference/cybersickness_row.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Raw Physiological Measurements for Cybersickness Study — cybersickness_row","text":"","code":"cybersickness_row"},{"path":"https://Ziwei-ChenChen.github.io/savvySh/reference/cybersickness_row.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Raw Physiological Measurements for Cybersickness Study — cybersickness_row","text":"object class data.frame 25893 rows 17 columns.","code":""},{"path":"https://Ziwei-ChenChen.github.io/savvySh/reference/cybersickness_row.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Raw Physiological Measurements for Cybersickness Study — cybersickness_row","text":"data frame 25893 rows 17 columns: Epoch: Time interval index. HR: Heart Rate. PC_HR: Percent change Heart Rate. HR_MIN: Minimum heart rate epoch. HR_MAX: Maximum heart rate epoch. HRV: Heart Rate Variability. PC_HRV: Percent change HRV. HRV_MIN: Minimum HRV epoch. HRV_MAX: Maximum HRV epoch. ...: columns include similar physiological signals.","code":""},{"path":"https://Ziwei-ChenChen.github.io/savvySh/reference/predict.savvySh_model.html","id":null,"dir":"Reference","previous_headings":"","what":"Predict Method for Slab and Shrinkage Linear Regression Models — predict.savvySh_model","title":"Predict Method for Slab and Shrinkage Linear Regression Models — predict.savvySh_model","text":"Generate predictions (fitted values) extract coefficients \"savvySh_model\" object produced savvySh. function allows specify shrinkage estimator use multiple estimators stored model.","code":""},{"path":"https://Ziwei-ChenChen.github.io/savvySh/reference/predict.savvySh_model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Predict Method for Slab and Shrinkage Linear Regression Models — predict.savvySh_model","text":"","code":"# S3 method for class 'savvySh_model' predict(   object,   newx = NULL,   type = c(\"response\", \"coefficients\"),   estimator = NULL,   ... )"},{"path":"https://Ziwei-ChenChen.github.io/savvySh/reference/predict.savvySh_model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Predict Method for Slab and Shrinkage Linear Regression Models — predict.savvySh_model","text":"object fitted \"savvySh_model\" object returned savvySh. newx numeric matrix new data (number predictors) generate predictions. Required type = \"response\". type = \"coefficients\", argument ignored. type character string specifying whether return fitted values (\"response\") regression coefficients (\"coefficients\"). Defaults \"response\". estimator character string naming shrinkage estimator use. Must match one estimators object$coefficients. NULL, defaults first available estimator object$coefficients. ... Additional arguments (currently unused).","code":""},{"path":"https://Ziwei-ChenChen.github.io/savvySh/reference/predict.savvySh_model.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Predict Method for Slab and Shrinkage Linear Regression Models — predict.savvySh_model","text":"type = \"response\", numeric vector predicted values. type = \"coefficients\", named numeric vector regression coefficients chosen estimator.","code":""},{"path":"https://Ziwei-ChenChen.github.io/savvySh/reference/predict.savvySh_model.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Predict Method for Slab and Shrinkage Linear Regression Models — predict.savvySh_model","text":"behavior depends value type: \"response\": Returns predicted values new data supplied via newx. \"coefficients\": Returns estimated coefficient vector requested estimator. estimator specified, defaults first one model object. instance, savvySh_model fitted model_class = \"Multiplicative\" typically \"St\", \"DSh\", possibly \"Sh\" include_Sh = TRUE.","code":""},{"path":[]},{"path":"https://Ziwei-ChenChen.github.io/savvySh/reference/predict.savvySh_model.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Predict Method for Slab and Shrinkage Linear Regression Models — predict.savvySh_model","text":"Ziwei Chen, Vali Asimit, Marina Anca Cidota, Jennifer Asimit Maintainer: Ziwei Chen <ziwei.chen.3@citystgeorges.ac.uk>","code":""},{"path":"https://Ziwei-ChenChen.github.io/savvySh/reference/print.savvySh_model.html","id":null,"dir":"Reference","previous_headings":"","what":"Print a Slab and Shrinkage Model Summary — print.savvySh_model","title":"Print a Slab and Shrinkage Model Summary — print.savvySh_model","text":"Displays concise summary fitted savvySh_model object, including original function call, chosen model class, number non-zero coefficients per estimator, optimal lambda value (applicable). Additionally, coefficients estimator printed user-specified precision.","code":""},{"path":"https://Ziwei-ChenChen.github.io/savvySh/reference/print.savvySh_model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print a Slab and Shrinkage Model Summary — print.savvySh_model","text":"","code":"# S3 method for class 'savvySh_model' print(x, digits = max(3, getOption(\"digits\") - 3), ...)"},{"path":"https://Ziwei-ChenChen.github.io/savvySh/reference/print.savvySh_model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print a Slab and Shrinkage Model Summary — print.savvySh_model","text":"x fitted \"savvySh_model\" object returned savvySh. digits integer specifying many significant digits display printing coefficients lambda. Defaults max(3, getOption(\"digits\") - 3). ... Additional arguments passed print (currently unused).","code":""},{"path":"https://Ziwei-ChenChen.github.io/savvySh/reference/print.savvySh_model.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print a Slab and Shrinkage Model Summary — print.savvySh_model","text":"Invisibly returns data.frame summarizing estimator's name, number non-zero coefficients, final optimal_lambda (). can captured processed user desired.","code":""},{"path":"https://Ziwei-ChenChen.github.io/savvySh/reference/print.savvySh_model.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Print a Slab and Shrinkage Model Summary — print.savvySh_model","text":"print method aims provide quick diagnostic fitted model, indicating many coefficients shrinkage estimator shrank exactly zero (), final lambda parameter , case rank-deficient data. also lists intercept predictor names next estimates estimator. function invisibly returns summary data.frame containing key metrics.","code":""},{"path":[]},{"path":"https://Ziwei-ChenChen.github.io/savvySh/reference/print.savvySh_model.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Print a Slab and Shrinkage Model Summary — print.savvySh_model","text":"Ziwei Chen, Vali Asimit, Marina Anca Cidota, Jennifer Asimit Maintainer: Ziwei Chen <ziwei.chen.3@citystgeorges.ac.uk>","code":""},{"path":"https://Ziwei-ChenChen.github.io/savvySh/reference/returns_441.html","id":null,"dir":"Reference","previous_headings":"","what":"Stock Return Panel: 441 Stocks Across 6037 Dates — returns_441","title":"Stock Return Panel: 441 Stocks Across 6037 Dates — returns_441","text":"dataset contains returns 441 stocks (identified PERMNO codes), adjusted dividends, 6037 time periods. column corresponds unique stock, first column date observation.","code":""},{"path":"https://Ziwei-ChenChen.github.io/savvySh/reference/returns_441.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Stock Return Panel: 441 Stocks Across 6037 Dates — returns_441","text":"","code":"returns_441"},{"path":"https://Ziwei-ChenChen.github.io/savvySh/reference/returns_441.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Stock Return Panel: 441 Stocks Across 6037 Dates — returns_441","text":"object class data.frame 6037 rows 442 columns.","code":""},{"path":"https://Ziwei-ChenChen.github.io/savvySh/reference/returns_441.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Stock Return Panel: 441 Stocks Across 6037 Dates — returns_441","text":"data frame 6037 rows 442 columns: Date: Date return observation (format: YYYY-MM-DD). PERMNO_*: remaining column corresponds one stock's return.","code":""},{"path":"https://Ziwei-ChenChen.github.io/savvySh/reference/savvySh.html","id":null,"dir":"Reference","previous_headings":"","what":"Slab and Shrinkage Linear Regression Estimation — savvySh","title":"Slab and Shrinkage Linear Regression Estimation — savvySh","text":"function estimates coefficients linear regression model using several shrinkage methods, including Multiplicative Shrinkage, Slab Regression, Linear shrinkage, Shrinkage Ridge Regression. method gives estimators balance bias variance applying shrinkage ordinary least squares (OLS) solution. shrinkage estimators computed based different assumptions data.","code":""},{"path":"https://Ziwei-ChenChen.github.io/savvySh/reference/savvySh.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Slab and Shrinkage Linear Regression Estimation — savvySh","text":"","code":"savvySh(x, y, model_class = c(\"Multiplicative\", \"Slab\", \"Linear\", \"ShrinkageRR\"),                v = 1, lambda_vals = NULL, nlambda = 100, folds = 10,                foldid = FALSE, include_Sh = FALSE, exclude = NULL)"},{"path":"https://Ziwei-ChenChen.github.io/savvySh/reference/savvySh.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Slab and Shrinkage Linear Regression Estimation — savvySh","text":"x matrix predictor variables. y vector response variable. model_class character string specifying shrinkage model use. Options \"Multiplicative\", \"Slab\", \"Linear\", \"ShrinkageRR\". default \"Multiplicative\". v numeric value controlling strength shrinkage SR estimator \"Slab\" model. Must positive number. Default 1. lambda_vals vector lambda values RR. used multicollinearity (rank deficiency) detected \"ShrinkageRR\" selected. NULL, default sequence used. nlambda number lambda values use cross-validation lambda_vals NULL. used multicollinearity present \"ShrinkageRR\" called. default 100. folds Number folds cross-validation RR. applicable multicollinearity occurs \"ShrinkageRR\" chosen. default 10 must integer >= 3. foldid Logical. TRUE, saves fold assignments output multicollinearity detected \"ShrinkageRR\" used. default FALSE. include_Sh Logical. TRUE, includes Sh estimator \"Multiplicative\" model. default FALSE. exclude vector specifying columns exclude predictors. default NULL.","code":""},{"path":"https://Ziwei-ChenChen.github.io/savvySh/reference/savvySh.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Slab and Shrinkage Linear Regression Estimation — savvySh","text":"list containing following elements: call matched function call. model data frame y x used analysis. optimal_lambda x full rank, value 0. x rank-deficient, chosen RR lambda cross-validation. model_class selected model class. coefficients list estimated coefficients applicable estimator model_class. fitted_values list fitted values estimator. pred_MSE list prediction MSEs estimator. ridge_results (optional) list containing detailed results RR, used multicollinearity (rank deficiency)  detected x \"ShrinkageRR\" called. element included RR applied instead OLS  due rank deficiency x. contains: lambda_range range lambda values used RR cross-validation. cvm vector cross-validated MSEs lambda lambda_range. cvsd standard deviation cross-validated MSEs lambda. ridge_coefficients matrix coefficients RR lambda value,  column representing coefficients corresponding specific lambda.","code":""},{"path":"https://Ziwei-ChenChen.github.io/savvySh/reference/savvySh.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Slab and Shrinkage Linear Regression Estimation — savvySh","text":"Slab Shrinkage Linear Regression Estimation methodology provides four classes shrinkage estimators reduce variance OLS solution introducing small, structured bias. methods handle overfitting, collinearity, high-dimensional scenarios controlling coefficients shrunk. class offers distinct strategy controlling instability improving mean squared error (MSE) linear models tailored different modeling contexts model_class. Model Classes: Multiplicative Shrinkage: class includes three estimators use OLS coefficients starting point apply     multiplicative adjustments:  St - Stein estimator, shrinks coefficients toward zero single global factor.         aims reduce MSE keeping overall bias fairly uniform across coefficients. DSh - Diagonal Shrinkage, assigning individual factor coefficient based         variance. yields targeted shrinkage global approach often achieves lower MSE. Sh - Shrinkage estimator solves Sylvester equation full (non-diagonal) shrinkage matrix.         flexible also computationally demanding. Included include_Sh = TRUE.  Slab Regression: Slab Regression applies adaptive quadratic penalty term OLS objective:  SR - Simple Slab Regression, modifies OLS objective         adding penalty fixed direction (often constant vector). penalty controlled v         require cross-validation. can viewed special case generalized lasso         focuses smooth (quadratic) rather \\(\\ell_1\\) regularization. GSR - Generalized Slab Regression, extending SR allowing shrinkage along multiple directions.         Typically, directions correspond eigenvectors design covariance matrix, effectively shrinking         principal components.  Linear Shrinkage: Linear Shrinkage (LSh) estimator forms convex combination OLS estimator (origin)     target estimator assumes uncorrelated predictors (diagonal approximation covariance).     approach simpler full matrix method well-suited standardized data intercept     needed. Shrinkage Ridge Regression: Shrinkage Ridge Regression (SRR) extends standard RR shrinking design covariance     matrix toward spherical target (.e., diagonal matrix equal entries). additional regularization     stabilizes eigenvalues yields robust coefficient estimates, particularly predictors lie     close low-dimensional subspace.","code":""},{"path":"https://Ziwei-ChenChen.github.io/savvySh/reference/savvySh.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Slab and Shrinkage Linear Regression Estimation — savvySh","text":"Asimit, V., Cidota, M. ., Chen, Z., & Asimit, J. (2025). Slab Shrinkage Linear Regression Estimation. Retrieved https://openaccess.city.ac.uk/id/eprint/35005/","code":""},{"path":"https://Ziwei-ChenChen.github.io/savvySh/reference/savvySh.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Slab and Shrinkage Linear Regression Estimation — savvySh","text":"Ziwei Chen, Vali Asimit, Marina Anca Cidota, Jennifer Asimit Maintainer: Ziwei Chen <ziwei.chen.3@citystgeorges.ac.uk>","code":""},{"path":"https://Ziwei-ChenChen.github.io/savvySh/reference/savvySh_model.html","id":null,"dir":"Reference","previous_headings":"","what":"Internal Class for Slab and Shrinkage Models — savvySh_model","title":"Internal Class for Slab and Shrinkage Models — savvySh_model","text":"alias documents S3 class savvySh_model, returned savvySh function. Instances class store fitted shrinkage estimators, predicted values, model information, etc.","code":""},{"path":"https://Ziwei-ChenChen.github.io/savvySh/reference/savvySh_model.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Internal Class for Slab and Shrinkage Models — savvySh_model","text":"Typically, construct savvySh_model objects directly. Instead, produced run savvySh(...). Several S3 methods coef.savvySh_model, predict.savvySh_model, summary.savvySh_model exist extracting information summarizing savvySh_model.","code":""},{"path":"https://Ziwei-ChenChen.github.io/savvySh/reference/summary.savvySh_model.html","id":null,"dir":"Reference","previous_headings":"","what":"Summarize a Slab and Shrinkage Linear Regression Model — summary.savvySh_model","title":"Summarize a Slab and Shrinkage Linear Regression Model — summary.savvySh_model","text":"Provides comprehensive summary estimator within savvySh_model object, including: estimated coefficients, confidence intervals, residual statistics, R-squared measures, F-statistics, information criteria (AIC, BIC).","code":""},{"path":"https://Ziwei-ChenChen.github.io/savvySh/reference/summary.savvySh_model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summarize a Slab and Shrinkage Linear Regression Model — summary.savvySh_model","text":"","code":"# S3 method for class 'savvySh_model' summary(object, ...)"},{"path":"https://Ziwei-ChenChen.github.io/savvySh/reference/summary.savvySh_model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summarize a Slab and Shrinkage Linear Regression Model — summary.savvySh_model","text":"object fitted model object class savvySh_model, produced savvySh. ... Additional arguments (currently unused).","code":""},{"path":"https://Ziwei-ChenChen.github.io/savvySh/reference/summary.savvySh_model.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summarize a Slab and Shrinkage Linear Regression Model — summary.savvySh_model","text":"Prints multi-section summary estimator within model. value returned, summary printed console.","code":""},{"path":"https://Ziwei-ChenChen.github.io/savvySh/reference/summary.savvySh_model.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Summarize a Slab and Shrinkage Linear Regression Model — summary.savvySh_model","text":"estimator (e.g., \"St\", \"DSh\", \"SR\", \"GSR\", \"Sh\", etc.) present savvySh_model object, function computes: Residual distribution summary (quantiles). Estimated coefficient table (Estimates, standard errors, t-values, p-values, confidence intervals). Residual standard error degrees freedom. R-squared adjusted R-squared. F-statistic (testing overall regression significance) p-value. AIC, BIC, deviance gauge model fit. results printed console estimator turn. Users can compare shrinkage approach performs respect fit significance. Internally, relies summaryStats_savvySh key computations.","code":""},{"path":[]},{"path":"https://Ziwei-ChenChen.github.io/savvySh/reference/summary.savvySh_model.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Summarize a Slab and Shrinkage Linear Regression Model — summary.savvySh_model","text":"Ziwei Chen, Vali Asimit, Marina Anca Cidota, Jennifer Asimit Maintainer: Ziwei Chen <ziwei.chen.3@citystgeorges.ac.uk>","code":""}]
